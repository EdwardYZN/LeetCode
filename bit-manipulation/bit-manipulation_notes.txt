******************************power-of-two
 Given an integer, write a function to determine if it is a power of two.
Credits: Special thanks to @jianchao.li.fighter for adding this problem and
creating all test cases.   Subscribe to see which companies asked this question
Show Tags   Math  Bit Manipulation     Show Similar Problems   (E) Number of 1
Bits  (E) Power of Three  (E) Power of Four

******************************reverse-bits
 Reverse bits of a given 32 bits unsigned integer.  For example, given input
43261596 (represented in binary as 00000010100101000001111010011100 ), return
964176192 (represented in binary as 00111001011110000010100101000000 ).   Follow
up : If this function is called many times, how would you optimize it?  Related
problem: Reverse Integer  Credits: Special thanks to @ts for adding this problem
and creating all test cases.   Subscribe to see which companies asked this
question    Show Tags   Bit Manipulation     Show Similar Problems   (E) Number
of 1 Bits

******************************subsets
 Given a set of distinct integers, nums , return all possible subsets.  Note:
The solution set must not contain duplicate subsets.  For example, If nums =
[1,2,3] , a solution is:  [
[3],
[1],
[2],
[1,2,3],
[1,3],
[2,3],
[1,2],
[]
]   Subscribe to see which companies asked this question    Show Tags   Array
Backtracking  Bit Manipulation     Show Similar Problems   (M) Generalized
Abbreviation

******************************find-the-difference
 Given two strings s and t which consist of only lowercase letters.  String t is
generated by random shuffling string s and then add one more letter at a random
position.  Find the letter that was added in t .  Example:  Input:
s = "abcd"
t = "abcde"
Output:
e
Explanation:
'e' is the letter that was added.   Subscribe to see which companies asked this
question    Show Tags   Hash Table  Bit Manipulation     Show Similar Problems
(E) Single Number

******************************repeated-dna-sequences
 All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T,
for example: "ACGAATTCCG". When studying DNA, it is sometimes useful to identify
repeated sequences within the DNA.  Write a function to find all the 10-letter-
long sequences (substrings) that occur more than once in a DNA molecule.  For
example,  Given s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT",
Return:
["AAAAACCCCC", "CCCCCAAAAA"].   Subscribe to see which companies asked this
question    Show Tags   Hash Table  Bit Manipulation

******************************utf-8-validation
 A character in UTF8 can be from 1 to 4 bytes long, subjected to the following
rules:   For 1-byte character, the first bit is a 0, followed by its unicode
code.  For n-bytes character, the first n-bits are all one's, the n+1 bit is 0,
followed by n-1 bytes with most significant 2 bits being 10.   This is how the
UTF-8 encoding would work:  Char. number range
UTF-8 octet sequence
(hexadecimal)
(binary)
--------------------+---------------------------------------------
0000 0000-0000 007F
0xxxxxxx
0000 0080-0000 07FF
110xxxxx 10xxxxxx
0000 0800-0000 FFFF
1110xxxx 10xxxxxx 10xxxxxx
0001 0000-0010 FFFF
11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  Given an array of integers representing the
data, return whether it is a valid utf-8 encoding.   Note: The input is an array
of integers. Only the least significant 8 bits of each integer is used to store
the data. This means each integer represents only 1 byte of data.   Example 1:
data = [197, 130, 1], which represents the octet sequence: 11000101 10000010
00000001 .
Return true .
It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte
character.    Example 2:  data = [235, 140, 4], which represented the octet
sequence: 11101011 10001100 00000100 .
Return false .
The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes
character.
The next byte is a continuation byte which starts with 10 and that's correct.
But the second continuation byte does not start with 10, so it is invalid.
Subscribe to see which companies asked this question    Show Tags   Bit
Manipulation

******************************bitwise-and-of-numbers-range
 Given a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of
all numbers in this range, inclusive.  For example, given the range [5, 7], you
should return 4.  Credits: Special thanks to @amrsaqr for adding this problem
and creating all test cases.   Subscribe to see which companies asked this
question    Show Tags   Bit Manipulation

******************************single-number-iii
 Given an array of numbers nums , in which exactly two elements appear only once
and all the other elements appear exactly twice. Find the two elements that
appear only once.  For example:  Given nums = [1, 2, 1, 3, 2, 5] , return [3, 5]
.   Note :   The order of the result is not important. So in the above example,
[5, 3] is also correct.  Your algorithm should run in linear runtime complexity.
Could you implement it using only constant space complexity?    Credits: Special
thanks to @jianchao.li.fighter for adding this problem and creating all test
cases.   Subscribe to see which companies asked this question    Show Tags   Bit
Manipulation     Show Similar Problems   (E) Single Number  (M) Single Number II

******************************binary-watch
 A binary watch has 4 LEDs on the top which represent the hours ( 0-11 ), and
the 6 LEDs on the bottom represent the minutes ( 0-59 ).  Each LED represents a
zero or one, with the least significant bit on the right.   For example, the
above binary watch reads "3:25".  Given a non-negative integer n which
represents the number of LEDs that are currently on, return all possible times
the watch could represent.  Example:  Input: n = 1 Return: ["1:00", "2:00",
"4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]   Note:   The
order of output does not matter.  The hour must not contain a leading zero, for
example "01:00" is not valid, it should be "1:00".  The minute must be consist
of two digits and may contain a leading zero, for example "10:2" is not valid,
it should be "10:02".     Subscribe to see which companies asked this question
Show Tags   Backtracking  Bit Manipulation     Show Similar Problems   (M)
Letter Combinations of a Phone Number  (E) Number of 1 Bits

******************************majority-element
 Given an array of size n , find the majority element. The majority element is
the element that appears more than  &lfloor; n/2 &rfloor; times.  You may assume
that the array is non-empty and the majority element always exist in the array.
Credits: Special thanks to @ts for adding this problem and creating all test
cases.   Subscribe to see which companies asked this question    Show Tags
Array  Divide and Conquer  Bit Manipulation     Show Similar Problems   (M)
Majority Element II

******************************maximum-product-of-word-lengths
 Given a string array words , find the maximum value of length(word[i]) *
length(word[j]) where the two words do not share common letters.
You may assume that each word will contain only lower case letters.
If no such two words exist, return 0.   Example 1:   Given ["abcw", "baz",
"foo", "bar", "xtfn", "abcdef"] Return 16 The two words can be "abcw", "xtfn" .
Example 2:   Given ["a", "ab", "abc", "d", "cd", "bcd", "abcd"] Return 4 The two
words can be "ab", "cd" .   Example 3:   Given ["a", "aa", "aaa", "aaaa"] Return
0 No such pair of words.  Credits: Special thanks to @dietpepsi for adding this
problem and creating all test cases.   Subscribe to see which companies asked
this question    Show Tags   Bit Manipulation

******************************single-number-ii
 Given an array of integers, every element appears three times except for one.
Find that single one.   Note: Your algorithm should have a linear runtime
complexity. Could you implement it without using extra memory?   Subscribe to
see which companies asked this question    Show Tags   Bit Manipulation     Show
Similar Problems   (E) Single Number  (M) Single Number III

******************************convert-a-number-to-hexadecimal
 Given an integer, write an algorithm to convert it to hexadecimal. For negative
integer, twoâ€™s complement method is used.  Note:   All letters in hexadecimal (
a-f ) must be in lowercase.  The hexadecimal string must not contain extra
leading 0 s. If the number is zero, it is represented by a single zero character
'0' ; otherwise, the first character in the hexadecimal string will not be the
zero character.  The given number is guaranteed to fit within the range of a
32-bit signed integer.  You must not use any method provided by the library
which converts/formats the number to hex directly.    Example 1:  Input:
26
Output:
"1a"   Example 2:  Input:
-1
Output:
"ffffffff"    Subscribe to see which companies asked this question    Show Tags
Bit Manipulation

******************************counting-bits
 Given a non negative integer number num . For every numbers i in the range 0
&le; i &le; num calculate the number of 1's in their binary representation and
return them as an array.   Example: For num = 5 you should return [0,1,1,2,1,2]
.   Follow up:   It is very easy to come up with a solution with run time
O(n*sizeof(integer)) . But can you do it in linear time O(n) /possibly in a
single pass?  Space complexity should be O(n) .  Can you do it like a boss? Do
it without using any builtin function like __builtin_popcount in c++ or in any
other language.     You should make use of what you have produced already.
Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to
generate new range from previous.  Or does the odd/even status of the number
help you in calculating the number of 1s?   Credits: Special thanks to @ syedee
for adding this problem and creating all test cases.   Subscribe to see which
companies asked this question    Show Tags   Dynamic Programming  Bit
Manipulation     Show Similar Problems   (E) Number of 1 Bits

******************************power-of-four
 Given an integer (signed 32 bits), write a function to check whether it is a
power of 4.  Example: Given num = 16, return true.
Given num = 5, return false.   Follow up : Could you solve it without
loops/recursion?  Credits: Special thanks to @yukuairoy for adding this problem
and creating all test cases.   Subscribe to see which companies asked this
question    Show Tags   Bit Manipulation     Show Similar Problems   (E) Power
of Two  (E) Power of Three

******************************single-number
 Given an array of integers, every element appears twice except for one. Find
that single one.   Note: Your algorithm should have a linear runtime complexity.
Could you implement it without using extra memory?   Subscribe to see which
companies asked this question    Show Tags   Hash Table  Bit Manipulation
Show Similar Problems   (M) Single Number II  (M) Single Number III  (M) Missing
Number  (H) Find the Duplicate Number  (E) Find the Difference

******************************missing-number
 Given an array containing n distinct numbers taken from 0, 1, 2, ..., n , find
the one that is missing from the array.  For example, Given nums = [0, 1, 3]
return 2 .   Note : Your algorithm should run in linear runtime complexity.
Could you implement it using only constant extra space complexity?  Credits:
Special thanks to @jianchao.li.fighter for adding this problem and creating all
test cases.   Subscribe to see which companies asked this question    Show Tags
Array  Math  Bit Manipulation     Show Similar Problems   (H) First Missing
Positive  (E) Single Number  (H) Find the Duplicate Number

******************************number-of-1-bits
 Write a function that takes an unsigned integer and returns the number of â€™1'
bits it has (also known as the Hamming weight ).  For example, the 32-bit
integer â€™11' has binary representation 00000000000000000000000000001011 , so the
function should return 3.  Credits: Special thanks to @ts for adding this
problem and creating all test cases.   Subscribe to see which companies asked
this question    Show Tags   Bit Manipulation     Show Similar Problems   (E)
Reverse Bits  (E) Power of Two  (M) Counting Bits  (E) Binary Watch

******************************sum-of-two-integers
 Calculate the sum of two integers a and b , but you are not allowed to use the
operator + and - .  Example: Given a = 1 and b = 2, return 3.  Credits: Special
thanks to @fujiaozhu for adding this problem and creating all test cases.
Subscribe to see which companies asked this question    Show Tags   Bit
Manipulation     Show Similar Problems   (M) Add Two Numbers

